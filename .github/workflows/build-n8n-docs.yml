name: Build n8n docs to DOCX/PDF
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout n8n docs
        uses: actions/checkout@v4
        with:
          repository: n8n-io/n8n-docs
          path: n8n-docs

      - name: Install dependencies (pandoc, LaTeX, SVG, Python, fonts, wkhtmltopdf)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pandoc fd-find python3-pip \
            texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended \
            texlive-xetex librsvg2-bin \
            fonts-dejavu fonts-liberation fonts-noto fonts-noto-cjk fonts-noto-color-emoji \
            wkhtmltopdf
          pip3 install pyyaml

      # (Optional, falls du meinen toleranten YAML-Loader nutzt â€“ ansonsten weglassen)
      - name: Build ordered file list from mkdocs.yml (tolerant loader)
        working-directory: n8n-docs
        run: |
          python3 - <<'PY'
          import os, yaml, sys
          class IgnoreTagsLoader(yaml.SafeLoader): pass
          def _ignore_unknown(loader, tag_suffix, node):
              if isinstance(node, yaml.ScalarNode):
                  return loader.construct_scalar(node)
              if isinstance(node, yaml.SequenceNode):
                  return loader.construct_sequence(node)
              if isinstance(node, yaml.MappingNode):
                  return loader.construct_mapping(node)
          yaml.add_multi_constructor('tag:yaml.org,2002:python/', _ignore_unknown, Loader=IgnoreTagsLoader)
          with open('mkdocs.yml','r',encoding='utf-8') as f:
              cfg = yaml.load(f, Loader=IgnoreTagsLoader) or {}
          nav = cfg.get('nav') or []
          paths=[]
          def walk(items):
              for it in (items or []):
                  if isinstance(it, dict):
                      for _, v in it.items():
                          if isinstance(v, list): walk(v)
                          else: paths.append(v)
                  elif isinstance(it, str):
                      paths.append(it)
          walk(nav)
          ordered=[]
          def add(p):
              if not p: return
              p = p if p.startswith('docs/') else os.path.join('docs', p)
              if p.endswith('.md') and os.path.exists(p) and p not in ordered:
                  ordered.append(p)
          for p in paths: add(p)
          for root, _, files in os.walk('docs'):
              for fn in sorted(files):
                  if fn.lower().endswith('.md'):
                      fp=os.path.join(root, fn)
                      if fp not in ordered: ordered.append(fp)
          with open('filelist.txt','w',encoding='utf-8') as out:
              out.write('\n'.join(ordered))
          print(f"Collected {len(ordered)} Markdown files.")
          PY

      - name: Write pandoc Lua filter to fix image paths
        working-directory: n8n-docs
        run: |
          cat > fix-img-paths.lua <<'LUA'
          function Image(el)
            local src = el.src
            if src:match("^/") then
              src = src:gsub("^/", "")
            end
            if (src:match("^_images/") or src:match("^images/") or src:match("^assets/")) and not src:match("^docs/") then
              src = "docs/" .. src
            end
            el.src = src
            return el
          end
          LUA

      - name: Build DOCX (images fixed via lua filter)
        working-directory: n8n-docs
        run: |
          xargs -a filelist.txt pandoc -s \
            --from=gfm+yaml_metadata_block \
            --lua-filter=fix-img-paths.lua \
            --resource-path=.:docs:docs/_images:docs/images:docs/assets \
            -o n8n-docs.docx

      - name: Build PDF (HTML engine via wkhtmltopdf)
        working-directory: n8n-docs
        run: |
          xargs -a filelist.txt pandoc -s \
            --from=gfm+yaml_metadata_block \
            --lua-filter=fix-img-paths.lua \
            --resource-path=.:docs:docs/_images:docs/images:docs/assets \
            --pdf-engine=wkhtmltopdf \
            -o n8n-docs.pdf

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: n8n-docs
          path: |
            n8n-docs/n8n-docs.docx
            n8n-docs/n8n-docs.pdf
